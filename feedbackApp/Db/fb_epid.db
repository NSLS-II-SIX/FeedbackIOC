
# Theory of operation:
# 1. A signal is available as an EPICS process variable.
#    The signal source can be in the VME with the feedback software
#    or in another VME available on the local network.
# 2. An input calculation (calcout record) is used to allow some
#    flexibility for conditioning the input signal to the feedback.
# 3. An epid record is used to provide real-time feedback
#    and recalculate the output variable.
# 4. The output from the epid record is buffered by
#    the outbuf calculation which watches the Feedback ON (FBON)
#    switch and retains the previous output value if the feedback
#    software is switched off.
# 5. An output calculation is used to allow some flexibility
#    for conditioning the output signal to the positioner.
#    The conditioned epid result is pushed to the positioner.
# 6. A positioner responds to the result from the epid record
#    and thus further modifies the input signal.
# 7. The feedback can be switched on manually, subject to
#    the logic of some other calculation.  For example,
#    shutter closed could suspend feedback.  In this case,
#    the output is not driven.
# 8. When the feedback is switched on, the positioner should
#    not jerk to a different position.  The feedback software
#    must be prepared to start moving the positioner from its 
#    present location.

# References
#  epid          http://cars9.uchicago.edu/software/epics/epidRecord.html
#  PID tuning    see the epid documentation (above)

#------------------------------------------

#
# epid record to actually calculate the 
# feedback response to the input
#

record(ao, "$(Sys)$(Dev)PID-SP"){
	field(OUT, "$(Sys)$(Dev)PID.VAL")
	field(FLNK, "$(Sys)$(Dev)Seq")
	field(PREC, "$(PREC,3)")
	field(EGU, "$(IEGU,)")
	info(autosaveFields, "DESC EGU VAL PREC")
}

record(ai, "$(Sys)$(Dev)PID-RB"){
	field(INP, "$(Sys)$(Dev)PID.VAL")
	field(PREC, "$(PREC,3)")
	field(EGU, "$(IEGU,)")
	info(autosaveFields, "PREC")
}

record(epid, "$(Sys)$(Dev)PID") {
	field(DESC, "EPID feedback")
	field(INP,  "$(IN)")
	field(FMOD, "$(MODE)")
	field(FBON, "Off")
	field(SCAN, "Passive")
	field(KP,   "0")
	field(KI,   "0")
	field(KD,   "0")
	field(I,    "0")
	field(DRVL, "0")
	field(DRVH, "0")
	field(EGU, "$(EGU,)")
	field(PREC, "$(PREC,3)")
	field(FLNK, "$(Sys)$(Dev)FOut")
	info(autosaveFields, "DESC EGU PREC SCAN VAL DRVL DRVH FMOD KP KI KD I")
}

record(fanout, "$(Sys)$(Dev)FOut"){
	field(LNK1, "$(Sys)$(Dev)Sts:Sbl-Calc")
	field(LNK2, "$(Sys)$(Dev)Val:OBuf-Calc")
	field(LNK3, "$(Sys)$(Dev)PID-RB")
	field(LNK4, "$(Sys)$(Dev)Val:Res-Calc")
	field(LNK5, "$(Sys)$(Dev)Val:FBOff-RB")
}

record(seq, "$(Sys)$(Dev)Seq"){
	field(LNK1, "$(Sys)$(Dev)PID:Busy-Sts PP")
	field(DOL1, "1")
	field(SELM, "All")
}

record(busy, "$(Sys)$(Dev)PID:Busy-Sts"){
}


#
# Record to show error status, this can be used as a settle monitor
#

record(calcout, "$(Sys)$(Dev)Sts:Sbl-Calc"){
	field(DESC, "EPID Settle Monitor")
	field(INPA, "$(Sys)$(Dev)PID.ERR PP")
	field(INPB, "$(Sys)$(Dev)Val:Sbl-SP PP")
	field(CALC, "ABS(A) > B")
	field(OOPT, "Transition To Zero")
	field(OUT, "$(Sys)$(Dev)PID:Busy-Sts PP")
	field(FLNK, "$(Sys)$(Dev)Val:Sbl-RB")
	field(EGU, "$(OEGU,)")
	field(PREC, "$(PREC,3)")
}

record(ao, "$(Sys)$(Dev)Val:Sbl-SP"){
	field(VAL, "0")
	field(PINI, "1")
	field(EGU, "$(OEGU,)")
	field(PREC, "$(PREC,3)")
	info(autosaveFields, "VAL PREC")
}

record(ai, "$(Sys)$(Dev)Val:Sbl-RB"){
	field(INP, "$(Sys)$(Dev)Sts:Sbl-Calc.B")
	field(EGU, "$(OEGU,)")
	field(PREC, "$(PREC,3)")
	info(autosaveFields, "PREC")
}

#
# Output buffer from epid record
# This record overcomes a limitation observed in the 
# epid record when $(Sys)$(Dev).FBON=0 but $(Sys)$(Dev).OVAL is changed anyway.
# In this record, $(Sys)$(Dev):obuf.VAL will not change when $(Sys)$(Dev).FBON=0
#

record(calc, "$(Sys)$(Dev)Val:FBOff-RB"){
	field(INPA, "$(Sys)$(Dev)PID.FBON NPP")
	field(CALC, "!A")
}

record(calcout, "$(Sys)$(Dev)Val:OBuf-Calc") {
	field(DESC, "EPID FBON output buffer")
	field(CALC, "A")
	field(INPA, "$(Sys)$(Dev)PID.OVAL PP")
	field(OUT, "$(OUT)")
	field(EGU, "$(OEGU,)")
	field(PREC, "$(PREC,3)")
	field(SDIS, "$(Sys)$(Dev)Val:FBOff-RB")
	field(DISA, "1")
}

#
# bumpless start feature
#
# When $(Sys)$(Dev).FBON transitions from 0 to 1 (as feedback starts up),
# it is necessary to grab the current value of the
# output positioner and push it into $(Sys)$(Dev).I
#
   
record(calcout, "$(Sys)$(Dev)Val:Res-Calc") {
	field(PREC, "$(PREC,3)")
	field(CALC, "A")
	field(INPA, "$(Sys)$(Dev)PID.FBON PP")
	field(OCAL, "B")
	field(INPB, "$(OUT)")
	field(OOPT, "Transition To Non-zero")
	field(DOPT, "Use OCAL")
	field(OUT, "$(Sys)$(Dev)PID.I")
	field(PREC, "$(PREC,3)")
	field(EGU, "$(IEGU,)")
}

#
# permit
#
# Sometimes, the feedback software must be suspended.
# This must happen automatically, based on some 
# simple calculation or a more complex database 
# resulting in this simple calculation.
# $(Sys)$(Dev):enable drives the $(Sys)$(Dev).FBON field
#

record(bo, "$(Sys)$(Dev)Sts:FB-Sel") {
	field(DESC, "Off/On")
	field(ZNAM, "OFF")
	field(ONAM, "ON")
	field(FLNK, "$(Sys)$(Dev)Sts:FB-Calc")
	field(PINI, "1")
	info(autosaveFields, "VAL")
}

record(calcout, "$(Sys)$(Dev)Sts:FB-Calc") {
	field(DESC, "EPID feedback permit")
	field(PREC, "$(PREC,3)")
	field(CALC, "$(CALC)")
	field(INPA, "$(Sys)$(Dev)Sts:FB-Sel.VAL PP")
	field(INPC, "$(PERMIT1)")
	field(INPD, "$(PERMIT2)")
	field(INPE, "$(PERMIT3)")
	field(INPF, "$(PERMIT4)")
	field(OOPT, "On Change")
	field(OUT, "$(Sys)$(Dev)PID.FBON")
	info(autosaveFields, "CALC INPC INPD INPE INPF") 
}

#
# Monitor of input value
#

record(calcout, "$(Sys)$(Dev)Inp-Sts"){
	field(INPA, "$(IN)")
	field(INPB, "$(Sys)$(Dev)Inp-Sts.VAL NPP")
	field(CALC, "A")
	field(OCAL, "!(A=B)")
	field(DOPT, "Use OCAL")
	field(SCAN, "5 second")
	field(OUT, "$(Sys)$(Dev)Sts:FB-Calc.B PP")
	info(autosaveFields, "SCAN VAL")
}
